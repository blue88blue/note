文件结构：
|——bin
|——build
|——CMakeList.txt
|——include
   |——f1.h
   |——f2.h
|——src
   |——CMakeList.txt
   |——main.c
   |——f1.c
   |——f2.c

我们在最外层目录下新建一个CMakeLists.txt，内容如下：

	set(CMAKE_CXX_STANDARD 14)        # g++版本要求 opencv4
	cmake_minimum_required (VERSION 2.8)
	project (demo)
	add_subdirectory (src)

这里指定src目录下存放了源文件，当执行cmake时，就会进入src目录下去找src目录下的CMakeLists.txt，所以在src目录下也建立一个CMakeLists.txt，内容如下，

	find_package( OpenCV REQUIRED )     # opencv库
	include_directories( ${OpenCV_INCLUDE_DIRS} ../include)   # 库的文件目录
	aux_source_directory(. SRC_LIST)         #aux_source_directory把当前目录下的源文件存列表存放到变量SRC_LIST里
	add_executable(main ${SRC_LIST})
	target_link_libraries( main ${OpenCV_LIBS} )
	set (EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin) #存放可执行文件的位置设置为工程根目录下的bin目录

在build目录下cmake .. 和make。在build目录下运行cmake，生成的附带文件就只会待在build目录下，如果我们不想要这些文件了就可以直接清空build目录，非常方便。

前面的工程使用了2个CMakeLists.txt，这种写法是为了处理需要生成多个elf文件的情况，最外层的CMakeLists.txt用于掌控全局，使用add_subdirectory来添加要生成elf文件的源码目录,如果只生成一个elf文件，那么上面的例子可以只使用一个CMakeLists.txt，可以把最外层的CMakeLists.txt内容改成如下:

	set(CMAKE_CXX_STANDARD 14)        # g++版本要求 opencv4
	cmake_minimum_required (VERSION 2.8)
	project (demo)

	aux_source_directory (src SRC_LIST)
	
	find_package( OpenCV REQUIRED )

	include_directories (${OpenCV_INCLUDE_DIRS} include)

	add_executable (main ${SRC_LIST})

	target_link_libraries( main ${OpenCV_LIBS} )

	set (EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

还要把src目录下的CMakeLists.txt删除。



