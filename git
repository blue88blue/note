#########################################git安装##################################################
sudo apt-get install git
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


#########################################基本使用##################################################
初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：
    使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    使用命令git commit -m <message>，完成。


#########################################版本退回##################################################
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


#########################################撤销修改##################################################
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


#########################################删除文件##################################################
rm test.txt
git rm test.txt
git commit -m "remove test.txt"   #提交修改

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

	git checkout -- test.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。


#########################################远程仓库##################################################
1.创建SSH Key：
	ssh-keygen -t rsa -C "youremail@example.com"
可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

2.登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容


#########################################添加远程仓库##############################################
1.将本地库与远程库关联：
git remote add origin git@github.com:michaelliao/learngit.git  原生git协议速度较快
或者     git remote add origin https://github.com/blue88blue/learngit.git

2.第一次提交：git push -u origin master
我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

3.此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；



#########################################分支创建与合并############################################
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


##########################################分支合并冲突#############################################
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图


##########################################分支管理策略#############################################
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

		git merge --no-ff -m "merge with no-ff" dev

因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。



########################################### BUG分支 ##############################################
当工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

		git stash

刚才的工作现场存到哪去了？用git stash list命令看看：
		git stash list  ---查看保存现场

一是用 git stash apply 恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了

		git stash pop


##########################################feature分支#############################################
Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。

现在我们强行删除：

		git branch -D feature-vulcan


############################################多人协作###############################################
多人协作的工作模式通常是这样：

    1.首先，可以试图用git push origin <branch-name>推送自己的修改；
    2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    3.如果合并有冲突，则解决冲突，并在本地提交；
    4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

小结
    1.查看远程库信息，使用git remote -v；
    2.本地新建的分支如果不推送到远程，对其他人就是不可见的；
    3.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    4.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    5.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    6.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

	git checkout -b dev            基于本地创建分支 
	git checkout -b dev origin/dev       基于远程分支创建本地分支



############################################ rebase ##############################################
------------直接git merge------------
如果A同学选择用git merge的方式进行合并dev到master分支，那么git会这么做:

	1.找出dev分支和master分支的最近共同祖先commit点，即C2
	2.将dev最新一次commit（C5）和master最新一次commit（C6）合并后生成一个新的commit（C7），有冲突的话需要解决冲突
	3.将以上两个分支dev和master上的所有提交点（从C2以后的）按照提交时间的先后顺序进行依次放到master分支上

------------git rebase 后再git merge------------

	1.rebase之前需要经master分支拉到最新
	2.切换分支到需要rebase的分支，这里是dev分支
	3.执行git rebase master，有冲突就解决冲突，解决后直接git add . 再git rebase --continue即可
	4.切换到master分支，执行git merge dev

# 当你最新推送的版本和别人已经推送到远程的版本要合并时，就是把你上一次推送的版本和别人现已经推送的版本合并，然后在这个合并的基础上增加你新开发的补丁。（且从这个基础上往后的版本的版本号和你之前的不一样）




############################################创建标签###############################################
    命令 git tag <tagname> 用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    命令 git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    命令 git tag 可以查看所有标签。
	
    可以用 git show <tagname>查看标签信息

# 标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。 



############################################创建标签###############################################

    命令 git push origin <tagname> 可以推送一个本地标签；

    命令 git push origin --tags 可以推送全部未推送过的本地标签；

    命令 git tag -d <tagname> 可以删除一个本地标签；

    命令 git push origin :refs/tags/<tagname> 可以删除一个远程标签。

# 因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。


# 设置别名
git config --global alias.st status

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"



































